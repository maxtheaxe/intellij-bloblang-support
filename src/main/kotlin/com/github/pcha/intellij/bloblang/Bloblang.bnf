{
  // Se usa el nuevo package
  parserClass="com.github.pcha.intellij.bloblang.parser.BloblangParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Bloblang"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.pcha.intellij.bloblang.psi"
  psiImplPackage="com.github.pcha.intellij.bloblang.psi.impl"

  elementTypeHolderClass="com.github.pcha.intellij.bloblang.psi.BloblangTypes"
  elementTypeClass="com.github.pcha.intellij.bloblang.psi.BloblangElementType"
  tokenTypeClass="com.github.pcha.intellij.bloblang.psi.BloblangTokenType"
}

bloblangFile ::= item_*

// En Bloblang los saltos de l√≠nea son significativos y se usan para separar instrucciones.
private item_ ::= (statement | COMMENT | NEWLINE)

opnl ::= NEWLINE*

statement ::= import_statement | map_statement | let_statement | meta_statement | plain_mapping_statement

import_statement ::= IMPORT_TERM filepath

filepath ::= single_line_string

identifier ::= VAR_NAME | SNAKE_CASE | ROOT | THIS

map_statement ::= MAP_TERM map_name mapping

map_name ::= single_line_string | identifier

assignment ::= let_statement | meta_statement | plain_mapping_statement

mapping ::= OPEN_BRACE opnl (assignment NEWLINE+)* assignment? CLOSE_BRACE

variable_name ::= single_line_string | identifier

let_statement ::= LET_TERM variable_name EQ query

meta_statement ::= META_TERM (name_literal | single_line_string) EQ query

name_literal ::= identifier | SNAKE_CASE

plain_mapping_statement ::= path EQ query

path ::= path_literal_segment ( DOT target_path )*

path_literal_segment ::= identifier

target_path ::= path_literal_segment | quoted_path_literal_segment

quoted_path_literal_segment ::= single_line_string

query ::= opnl (arithmetic_expression | literal_value)

arithmetic_expression ::= arithmetic_term (arithmetic_operator arithmetic_term)*

arithmetic_term ::= MINUS? query_root

query_root ::= with_tails

with_tails ::= might_not (query_delim function_tail)*

might_not ::= NOT? query_element

query_delim ::= DOT

function_tail ::= (OPEN_BRACE query CLOSE_BRACE) | function | field_literal_map

field_literal_map ::= identifier | single_line_string

arithmetic_operator ::= PLUS | MINUS | DIVIDE | MULTIPLY | REST | AND | OR | EQUALS | NOT_EQUALS | GREATER_OR_EQUAL | LESS_OR_EQUAL | GREATER | LESS | PIPE

query_element ::= match_expression | if_expression | lambda_expression | brackets_expression | literal_value | function | VARIABLE_LITERAL | field_literal

match_expression ::= MATCH_TERM query? match_cases_set

match_cases_set ::= OPEN_BRACE (match_case COMMA)* match_case? CLOSE_BRACE

match_case ::= (UNDERSCORE | query) DOUBLE_ARROW query

if_expression ::= IF_TERM query? OPEN_BRACE query opnl CLOSE_BRACE (else_if* else)?

else ::= ELSE_TERM OPEN_BRACE query opnl CLOSE_BRACE
else_if ::= ELSE_TERM IF_TERM query? OPEN_BRACE query opnl CLOSE_BRACE

lambda_expression ::= context_name ARROW query

context_name ::= identifier

brackets_expression ::= OPEN_PARENTHESIS query CLOSE_PARENTHESIS

string_literal ::= single_line_string | multiline_string

single_line_string ::= SINGLE_LINE_STRING_QUOTE string_inner_content? SINGLE_LINE_STRING_QUOTE
string_inner_content ::= string_content_part*
string_content_part ::= STRING_CONTENT | string_escaped_char
string_escaped_char ::= STRING_ESCAPE ESCAPED_CHAR

multiline_string ::= MULTILINE_STRING_QUOTE string_multiline_content? MULTILINE_STRING_QUOTE
string_multiline_content ::= STRING_CONTENT*

literal_value ::= BOOLEAN | NUMBER | string_literal | NULL | dynamic_array | dynamic_object

dynamic_array ::= OPEN_BRACKET (query COMMA)* query? CLOSE_BRACKET

dynamic_object ::= OPEN_BRACE (object_field COMMA)* object_field? opnl CLOSE_BRACE

object_field ::= (single_line_string | query) COLON query

function ::= FUNCTION_CALL_OPEN function_args function_call_close

function_call_close ::= CLOSE_PARENTHESIS

function_args ::= (arg (COMMA arg)*)?

field_literal ::= field_path

field_path ::= path_field_segment ( DOT field_path )*

path_field_segment ::= (VAR_NAME | SNAKE_CASE | THIS ) & (!function)

arg ::= named_arg | query

named_arg ::= SNAKE_CASE COLON query
